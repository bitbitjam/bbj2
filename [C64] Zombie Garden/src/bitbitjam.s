	processor 6502
	org $1000
	
	

textptrlo       = $12
textptrhi       = $13
temp1           = $14
temp2           = $15
temp3           = $16
temp4           = $17
temp5           = $18
temp6           = $19
temp7           = $1a
temp8           = $1b
textcolor       = $1c

textscreen      = $0400
sprites         = $2000
music           = $4000
colors          = $d800

	
	
	MAC move_enemy
	
	
		clc
		lda {1}
		adc {1}
	    tay
		
		sec
		lda enemy_pos_x,y
		sbc #$4
		sta enemy_pos_x,y

		lda enemy_pos_x+#$1,y
		sbc #$0
		sta enemy_pos_x+#$1,y
		
		lda enemy_pos_x+#$1,y
		bne .no_reset
		
		lda enemy_pos_x,y
		cmp #$8
		bcs .no_reset

		
		ldy {1}
		lda #$0
		sta enemy_state,y
.no_reset

	ENDM
	
	MAC move_proj
	
		ldy {1}
		lda enemy_state,y
		beq .ok
		
		clc
		lda {1}
		adc {1}
	    tay
		
	    clc
		lda enemy_pos_x,y
		adc #$4
		sta enemy_pos_x,y
        
		lda enemy_pos_x+#$1,y
		adc #$0
		sta enemy_pos_x+#$1,y
		
        lda enemy_pos_x+#$1,y
		beq .ok
		
		lda enemy_pos_x,y
		cmp #85
		bcc .ok
		
		lda #$1                        ;;;;;FURORI DALLO SCHERMO
		lda enemy_pos_x+#$1,y
		
		ldy {1}
		lda #$0
		sta enemy_state,y
		
.ok
		
	ENDM

	MAC draw_sprite
	
	;	ldy {1}
	;	lda enemy_state,y
	;	beq .no_action

		clc
		lda {1}
		adc {1}
		tax

		lda enemy_pos_x,x
		sta $d000,x
		
		lda enemy_pos_y,x
		sta $d000+#$1,x

		
		lda enemy_pos_x+#$1,x
		beq .no_action
		
		tax
		
		ldy {1}
		
		lda shit_table,y
		ora $d010
		sta $d010
		
.no_action		
	ENDM
	
    MAC play_enemy
		
		ldy {1}
		lda enemy_state,y
		beq .no_action

		move_enemy {1}
				
.no_action
	ENDM
	
    MAC add_score2   ;;;;;; var,value
		sed
		clc
		ldy #$0
		
		lda {1}+$1,y
		adc {2}		
		sta {1}+$1,y
	   
	    lda {1}
		adc #$0
		sta {1}
		
		cld
	
	ENDM
	
	MAC print_num
		ldy #$0
		
		
		lda {1}+$1,y
		and #$0f
		ora #$30
		sta {2}+#3,y
					
		lda {1}+$1,y
		and #$f0
		lsr
		lsr
		lsr
		lsr
		ora #$30
		sta {2}+#2,y

		lda {1}
		and #$0f
		ora #$30
		sta {2}+#1,y

					
		lda {1}
		and #$f0
		lsr
		lsr
		lsr
		lsr
		ora #$30
		sta {2}
	
	ENDM
		
	MAC memcopy255
	ldx {2}
.scroll
  lda $5000+{1},x
  sta $0400+{1},x
  dex
  bne .scroll
	ENDM	
	
	
	MAC setmapcolor
	ldx {2}
.next
	lda {3}
	sta $d800+{1},x
	dex
	bne .next
	
	lda {3}
	ldx #0
	sta $d800+{1},x
	ENDM	

	
  lda #$ff                        ;imposta sprite multicolor
  sta $d01c
  lda #$00                        
  sta $d025
  lda #$0f
  sta $d026

	
	lda #$89					;; imposta l'area di memoria degli sprite a $2000
	sta $07f8
	
	lda #$80+#$11					;; imposta l'area di memoria degli sprite a $2000
	sta $07f9

	lda #$80+#$11					;; imposta l'area di memoria degli sprite a $2000
	sta $07fa

	lda #$80+#$18					;; imposta l'area di memoria degli sprite a $2000
	sta $07fb

	lda #$80+#$11					;; imposta l'area di memoria degli sprite a $2000
	sta $07fc

	lda #$80+#$11					;; imposta l'area di memoria degli sprite a $2000
	sta $07fd

	lda #$80+#$11					;; imposta l'area di memoria degli sprite a $2000
	sta $07fe


	lda #$80+#$11					;; imposta l'area di memoria degli sprite a $2000
	sta $07ff

	lda #$ff                    ;; abilita tutti gli sprite del gioco
	sta $d015

	lda #$80
	sta $d000
	sta $d001
    
        
	lda #$00
	jsr music
	
	lda $d011
	ora #$07
	and #119
	
	sta $d011
	

  ; setup multicolor char mode and register scroll to 7
  lda #200
  ora #16
  sta $d016
  
  lda $d018
  sta origchars
  
	lda #$1C      ;charset at $3000
	sta $d018
	
	
	;star scroll to 25 row
	lda #$e8
	sta $2
	lda #$53
	sta $3
	
	;setup color map
	setmapcolor #240*0,#240	,#13
	setmapcolor #240*1,#240 ,#13
	setmapcolor #240*2,#240 ,#13
	setmapcolor #240*3,#40*1 ,#13
	setmapcolor #240*3+40,#40*2 ,#0
	;setmapcolor #240*3+40*2,#40*5 ,#1
	
	
	;copy first screen of the level
	memcopy255 #$ff*0,#$ff	
	memcopy255 #$ff*1,#$ff
	memcopy255 #$ff*2,#$ff
	memcopy255 #$ff*2,#235
	
	sei        ;disable maskable IRQs
	
	lda #$7f
	sta $dc0d  ;disable timer interrupts which can be generated by the two CIA chips
	sta $dd0d  ;the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better
	           ;stop it.
	           
	lda #$01   ;this is how to tell the VICII to generate a raster interrupt
	sta $d01a	           

	lda #$0   ;this is how to tell at which rasterline we want the irq to be triggered
	sta $d012	
	
	;lda #$1b   ;as there are more than 256 rasterlines, the topmost bit of $d011 serves as
	;sta $d011  ;the 8th bit for the rasterline we want our irq to be triggered.
           ;here we simply set up a character screen, leaving the topmost bit 0.

;	lda #$35   ;we turn off the BASIC and KERNAL rom here
;	sta $01    ;the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of
	           ;SID/VICII/etc are visible
	           
	lda #<irq  ;this is how we set up
	sta $0314  ;the address of our interrupt code
	lda #>irq
	STA $0315
	
	
	cli        ;enable maskable interrupts again
	lda $d011
	sta res
wait 
	;lda #$fc
	;cmp $d012
	bne wait
irq
	
	lda #$1C      ;charset at $3000
	sta $d018

  ; setup multicolor char mode and register scroll to 7
	lda #200
	ora #16
	sta $d016


	ldx #$00
	stx $d020           
	ldx #9
	stx $d021           
	ldx #0
	stx $d022           
	ldx #15
	stx $d023           

	lda #$0
	sta $d010

	
	draw_sprite  #$1
	draw_sprite  #$2
	draw_sprite  #$3
	draw_sprite  #$4
	draw_sprite  #$5
	draw_sprite  #$6
	
	
	lda spritesy
	sta $d001
	lda spritesx
	sta $d000
	
	;lda #150
	;sta $d003
	;sta $d002
	
	
	lda #<panel  
	sta $0314  
	lda #>panel

	STA $0315
	ldy #44+#20*#8   
	sty $d012			         	          

	asl $d019
    jmp    $ea81
	jmp wait
	
musicplayer
	jsr music+3
	rts

	
procPlayPoj
	move_proj #$3
	rts

procPlayEnemies

	play_enemy #$1
	play_enemy #$2
	;play_enemy #$3
	play_enemy #$4
	play_enemy #$5
	play_enemy #$6
	
	rts	
	

procCollisionDetection
	sta R8
	sta R6 
	
	ldx  #$0
	lda enemy_state+#$3,x
	beq no_coll

	
	ldx #$0
	lda enemy_pos_x+#$6,x   ;;;; carica coordinata x bullet
	sta R7
	
	
	clc
	lda R8
	adc R8
	tay

	lda enemy_pos_x+#$7,x
	cmp enemy_pos_x+#$1,y	 
	beq check_coll
	
	jmp no_coll

	
	
	
check_coll
	lda enemy_pos_x,y
	clc
	cmp R7
	bcs no_coll
	
	lda enemy_pos_y+#$6,x   ;;;; carica coordinata y bullet
	sta R7
	
	lda enemy_pos_y,y
	clc
	cmp R7
	bcs no_coll
	
	clc
	adc #24
	cmp R7
	bcc no_coll
	
	lda R6
	tay
	lda #0
	sta enemy_state,y
	sta enemy_state+#$3,x
	sta enemy_pos_y+#$6,x
	sta enemy_pos_x+#$6,x
	
	clc
	lda R6
	adc R6
	tay
	
	lda #0
	sta enemy_pos_y,y
	sta enemy_pos_x,y
	sta enemy_pos_x+#$1,y
	
	
	add_score2 PA,#$20
no_coll
	rts
	
procGameLogic

	sta R7
	tay
	lda enemy_state,y
	bne exit_logic
	
	
reset
	lda curtrack
	tax
 	
	lda track_path,x	
	sta R8
	cmp #$ff
	bne store_coord	
	
	lda #$0
	sta curtrack

    jmp reset
	
store_coord
	lda R8
	tax
	lda track_timer,x
	bne exit_logic
	
	lda #35
	sta track_timer,x

;;;;
	lda R7
	tay
	lda #$1
	sta enemy_state,y
	
	clc
	lda R7
	adc R7
	tay

	lda #$1
	sta enemy_pos_x+#$1,y
	
	lda #88
	sta enemy_pos_x,y

;;;;


	lda R8
	tax
	lda track,x
	sta enemy_pos_y,y

	inc curtrack

exit_logic
	rts
	
	
getcontrols
	lda #$ff
	sta $dc00
	lda joystick
	sta prevjoy
	lda $dc00
	eor #$ff
	sta joystick
	rts
	
panel
  ; setup multicolor char mode and register scroll to 7
  lda #200
;  ora #16
  sta $d016

	lda $d011
	ora #7
	and #119
    sta $d011

		
	lda origchars 
	sta $d018
	
	lda #220
	sta $d001
	sta $d000

	lda #220
	sta $d003
	lda #240
	sta $d002

	
	ldx #$00
	stx $d020           
	stx $d021           		
	stx $d022           		
	stx $d023           	


  ;;lda #<scoretext
  ;;sta textptrlo
  ;;lda #>scoretext
  ;;sta textptrhi
  ;;lda #7
  ;;sta textcolor
  ;;ldx #1
  ;;ldy #23
  ;;jsr printtext

  
  jsr getcontrols
  jsr musicplayer
	

 
check_joy_up	
	lda joystick            
	and #$1
	beq check_joy_down	
	dec spritesy
	
check_joy_down
	lda joystick            
	and #$2
	beq check_joy_left
	inc spritesy
	
check_joy_left
	lda joystick            
	and #$4
	beq check_joy_right
	dec spritesx
	

check_joy_right
	lda joystick            
	and #$8
	beq check_joy_fire
	inc spritesx


check_joy_fire
	lda joystick            
	and #$10
	beq update
	ldy #$0
	
	lda enemy_state+#$3,y
	bne update
	
	lda spritesx
	sta enemy_pos_x+#$6,y

	lda spritesy
	clc
	adc #7
	sta enemy_pos_y+#$6,y

	lda #$00
	sta enemy_pos_x+#$7,y
	
	lda #$2
	clc
	adc #21
	sta enemy_state+#$3,y
	
update
	
	
   
	print_num  PA , $770

    add_score2 PA_1,#$5 
	print_num  PA_1 , $780
	
	jsr procPlayPoj
	
	clc
	lda framecount
	cmp #$5
	bne skip_logic
	lda #$0
	sta framecount
	
	jsr procPlayEnemies

skip_logic
	
	ldx #$0
	
	lda track_timer,x
	beq t1
	dec track_timer,x
t1
	lda track_timer+#$01,x
	beq t2
	dec track_timer+#$01,x
t2  
	lda track_timer+#$02,x
	beq t3
	dec track_timer+#$02,x
t3  
	lda track_timer+#$03,x
	beq t4
	dec track_timer+#$03,x
t4
	
	lda #$1
	jsr procGameLogic
	
	lda #$2
	jsr procGameLogic

	lda #$4
	jsr procGameLogic

	lda #$5
	jsr procGameLogic

	lda #$6
	jsr procGameLogic

	
	lda #$1
	jsr procCollisionDetection
	
	lda #$2
	jsr procCollisionDetection

	lda #$4
	jsr procCollisionDetection

	lda #$5
	jsr procCollisionDetection
	
	lda #$6
	jsr procCollisionDetection
	
	inc framecount
	
	lda #<irq
	sta $0314  
	lda #>irq
	STA $0315
	
	ldy #253
	sty $d012			         	          

	asl $d019
  jmp    $ea81
	
printtext:      sty temp6
                txa
                clc
                adc screenrowtbllo,y
                sta temp1
                sta temp3
                lda #>textscreen
                adc screenrowtblhi,y
                sta temp2
                lda screenrowtblhi,y
                ora #>colors
                sta temp4
                ldy #$00
pt_printloop:   lda (textptrlo),y
                beq pt_printend
                and #$3f
                sta (temp1),y
                lda textcolor
                sta (temp3),y
                iny
                jmp pt_printloop
pt_printend:    tya
                sec                             ;Add one more; INY not needed
                adc textptrlo
                sta textptrlo
                bcc pt_notover3
                inc textptrhi
pt_notover3:    ldy temp6
                rts

cur_prj        dc.b 0

curtrack       dc.b #0			

track		   
			   dc.b #58
			   dc.b #58+40*1
			   dc.b #58+40*2
			   dc.b #58+40*3
			   dc.b #58+40*4
			  
track_path     dc.b 0,1,1,0,2,3,3,1,1,1,2,3,3,2,1,0,0,1,2,0,3,3,2,1,0,1,0,1,2,2,2,1,2,2,0,0,0,1,1,1,3,2,1,2,#$ff				

track_timer    dc.b #0
			   dc.b #0
			   dc.b #0
			   dc.b #0

enemy_state    dc.b 0
			   dc.b #$0
			   dc.b #$0
			   dc.b #$0
			   dc.b #$0
			   dc.b #$0
			   dc.b #$0
			   dc.b #$0
			   
enemy_pos_x    dc.w 0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   
enemy_pos_y    dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   dc.w #0
			   
shit_table    dc.b 1,2,4,8,16,32,64,128,255

joystick       dc.b 0
prevjoy        dc.b 0
spritesx       ds.b 8,100
spritesy       ds.b 8,100
scrolly        dc.b 0
framecount     dc.b 0
flip		   dc.b 0
addr		   dc.w #$5000
res			   dc.b 0
cmdscroll      dc.b 0
origchars	   dc.b 0
R8             dc.b 0
R7             dc.b 0
R6             dc.b 0
PA             dc.b 0
               dc.b 0

PA_1           dc.w 0
			   
screenrowtbllo:
N               SET 0
                REPEAT 25
                dc.b #<(N*40)
N               SET N+1
                REPEND
screenrowtblhi:
N               SET 0
                REPEAT 25
                dc.b #>(N*40)
N               SET N+1
                REPEND
scoretext:      dc.b "       BITBITJAM C64",0
	org $2000
sprites
	incbin sprites.raw
	org $3000
	incbin chars.raw
	org $4000
music
	incbin music.bin	
	org $5000
mapdata
	incbin map.raw	